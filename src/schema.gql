type Channel {
	id: ID!
	name: String!
	messages: [Message]
}

type Message {
	channelId: ID!
	messageId: ID!
	content: String!
}

type Mutation {
	#Put a single value of type 'Channel'.
	################# If an item exists it's updated. If it does not it's created.
	putChannel(id: ID!, name: String!): Channel
	#Delete a single value of type 'Channel' by a primary key.
	deleteChannel(id: ID!): Channel
	#Put a single value of type 'Message'.
	############### If an item exists it's updated. If it does not it's created.
	putMessage(channelId: ID!, messageId: ID!, content: String!): Message
	#Delete a single value of type 'Message' by a primary key.
	deleteMessage(channelId: ID!, id: ID!): Message
}

type Query {
	allChannels: [Channel]
	#Get a single value of type 'Channel' by primary key.
	getChannel(id: ID!): Channel
	getChannelMessages(channelId: ID!): [Message]
}

type Subscription {
	subscribeToChannelMessages(channelId: String!): Message
		@aws_subscribe(mutations: ["putMessage"])
	putChannel: Channel
		@aws_subscribe(mutations: ["putChannel"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
